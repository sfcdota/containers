Test will run 1000 times!
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4
size of first: 0
size of second: 3
size of third: 0
size of fourth: 2
total: 55
Popping out elements... 4 3 2 1 0
Popping out elements... 4 3 2 1 0
0. size: 0
1. size: 5
2. size: 4
mystack.top() is now 15
Size of first: 7
Size of second: 5
Size of third: 3
myvector contains: 0 1 2 3 4 5 6 7 8 9
myvector contains: 10 9 8 7 6 5 4 3 2 1 0
myvector contains: 1 2 3 4 5
size: 100
capacity: 128
myvector contains: 100 200 300
myvector contains: 1101 2202
The contents of fifth are: 16 2 77 29
total: 55
myvector contains: 4 5 7 8 9 10
myvector.front() is now 62
myvector contains: 501 502 503 300 300 400 400 200 100 100 100
size: 100
capacity: 128
Size of foo: 0
Size of bar: 3
myvector contains: 9 8 7 6 5 4 3 2 1 0
The elements of myvector add up to 600
Please enter some integers (enter 0 to end):
myvector stores 14 numbers.
myvector contains: 5 4 3 2 1
foo and bar are not equal
foo is less than bar
foo is less than or equal to bar
making foo grow:
capacity changed: 1
capacity changed: 2
capacity changed: 4
capacity changed: 8
capacity changed: 16
capacity changed: 32
capacity changed: 64
capacity changed: 128
making bar grow:
capacity changed: 100
myvector contains: 1 2 3 4 5 100 100 100 0 0 0 0
0. size: 0
1. size: 10
2. size: 20
3. size: 19
foo contains: 200 200 200 200 200
bar contains: 100 100 100
foo contains: 200 200 200 200 200
bar contains: 100 100 100
a => 200
b => 100
c => 300
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202
fifth: d -> 70
fifth: c -> 50
fifth: b -> 30
fifth: a -> 10
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.
a => 10
b => 20
c => 30
lower bound points to: b => 20
upper bound points to: c => 30
a => 10
d => 40
elements in mymap:
a => 50
c => 150
d => 200
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
mymap contains:
a => 100
b => 200
c => 300

a => 20
e => 100
The map contains 1000 elements.
Size of first: 0
Size of second: 3
mymap['a'] is an element
mymap['b'] is another element
mymap['c'] is another element
mymap['d'] is 
mymap now contains 4 elements.
z => 300
y => 200
x => 100
mymap.size() is 3
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200
mymap contains:
x => 1001
y => 2002
z => 3003
myset contains: 13 23 42 65 75
myset contains: 100 200 300
myset contains: 1101 2202
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.
myset contains: 10 20 30
the lower bound points to: 30
the upper bound points to: 40
myset contains: 10 30 50
myset contains: 10 30 50
myset contains: 5 10 15 20 24 25 26 30 40 50
myset contains: 0 1 2 3 4
myset contains: 10 20 70 80 90
The set contains 1000 elements.
Size of first: 0
Size of second: 5
myset contains: 78 64 49 21 17
foo and bar are not equal
foo is greater than bar
foo is greater than or equal to bar
0. size: 0
1. size: 10
2. size: 11
3. size: 10
first contains: 20 25 32
second contains: 10 12 75
myset contains: 0 1 2 3 4

./base/map/insert/patched.cpp:10:9: error: no matching member function for call to 'insert'
  mymap.insert ( std::pair<char,int>('a',100) );
  ~~~~~~^~~~~~
../map.hpp:557:26: note: candidate function not viable: no known conversion from 'std::pair<char, int>' to 'const ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::value_type' (aka 'const pair<const char, int>') for 1st argument
    pair<iterator, bool> insert(const value_type &val) {
                         ^
../map.hpp:561:14: note: candidate function not viable: requires 2 arguments, but 1 was provided
    iterator insert(iterator position, const value_type &val) { (void)position; return iterator(insert(val).first); }
             ^
../map.hpp:563:10: note: candidate function template not viable: requires 2 arguments, but 1 was provided
    void insert(InputIterator first, InputIterator last) {
         ^
./base/map/insert/patched.cpp:11:9: error: no matching member function for call to 'insert'
  mymap.insert ( std::pair<char,int>('z',200) );
  ~~~~~~^~~~~~
../map.hpp:557:26: note: candidate function not viable: no known conversion from 'std::pair<char, int>' to 'const ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::value_type' (aka 'const pair<const char, int>') for 1st argument
    pair<iterator, bool> insert(const value_type &val) {
                         ^
../map.hpp:561:14: note: candidate function not viable: requires 2 arguments, but 1 was provided
    iterator insert(iterator position, const value_type &val) { (void)position; return iterator(insert(val).first); }
             ^
../map.hpp:563:10: note: candidate function template not viable: requires 2 arguments, but 1 was provided
    void insert(InputIterator first, InputIterator last) {
         ^
./base/map/insert/patched.cpp:14:15: error: no matching member function for call to 'insert'
  ret = mymap.insert ( std::pair<char,int>('z',500) );
        ~~~~~~^~~~~~
../map.hpp:557:26: note: candidate function not viable: no known conversion from 'std::pair<char, int>' to 'const ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::value_type' (aka 'const pair<const char, int>') for 1st argument
    pair<iterator, bool> insert(const value_type &val) {
                         ^
../map.hpp:561:14: note: candidate function not viable: requires 2 arguments, but 1 was provided
    iterator insert(iterator position, const value_type &val) { (void)position; return iterator(insert(val).first); }
             ^
../map.hpp:563:10: note: candidate function template not viable: requires 2 arguments, but 1 was provided
    void insert(InputIterator first, InputIterator last) {
         ^
./base/map/insert/patched.cpp:22:9: error: no matching member function for call to 'insert'
  mymap.insert (it, std::pair<char,int>('b',300));  // max efficiency inserting
  ~~~~~~^~~~~~
../map.hpp:561:14: note: candidate function not viable: no known conversion from 'std::pair<char, int>' to 'const ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::value_type' (aka 'const pair<const char, int>') for 2nd argument
    iterator insert(iterator position, const value_type &val) { (void)position; return iterator(insert(val).first); }
             ^
../map.hpp:563:10: note: candidate template ignored: deduced conflicting types for parameter 'InputIterator' ('ft::map_iterator<ft::bidirectional_iterator_tag, ft::pair<const char, int>, long, ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::Node<ft::pair<const char, int> > *, ft::pair<const char, int> &>' vs. 'std::pair<char, int>')
    void insert(InputIterator first, InputIterator last) {
         ^
../map.hpp:557:26: note: candidate function not viable: requires single argument 'val', but 2 arguments were provided
    pair<iterator, bool> insert(const value_type &val) {
                         ^
./base/map/insert/patched.cpp:23:9: error: no matching member function for call to 'insert'
  mymap.insert (it, std::pair<char,int>('c',400));  // no max efficiency inserting
  ~~~~~~^~~~~~
../map.hpp:561:14: note: candidate function not viable: no known conversion from 'std::pair<char, int>' to 'const ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::value_type' (aka 'const pair<const char, int>') for 2nd argument
    iterator insert(iterator position, const value_type &val) { (void)position; return iterator(insert(val).first); }
             ^
../map.hpp:563:10: note: candidate template ignored: deduced conflicting types for parameter 'InputIterator' ('ft::map_iterator<ft::bidirectional_iterator_tag, ft::pair<const char, int>, long, ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::Node<ft::pair<const char, int> > *, ft::pair<const char, int> &>' vs. 'std::pair<char, int>')
    void insert(InputIterator first, InputIterator last) {
         ^
../map.hpp:557:26: note: candidate function not viable: requires single argument 'val', but 2 arguments were provided
    pair<iterator, bool> insert(const value_type &val) {
                         ^
5 errors generated.

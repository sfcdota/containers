./base/map/equal_range/patched.cpp:14:7: error: no viable overloaded '='
  ret = mymap.equal_range('b');
  ~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~
/usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/stl_pair.h:208:12: note: candidate function (the implicit copy assignment operator) not viable: no known conversion from 'pair<ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::iterator, ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::iterator>' (aka 'pair<map_iterator<ft::bidirectional_iterator_tag, pair<const char, int>, long, Node<pair<const char, int> > *>, map_iterator<ft::bidirectional_iterator_tag, pair<const char, int>, long, Node<pair<const char, int> > *> >') to 'const std::pair<ft::map_iterator<ft::bidirectional_iterator_tag, ft::pair<const char, int>, long, ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::Node<ft::pair<const char, int> > *, ft::pair<const char, int> &>, ft::map_iterator<ft::bidirectional_iterator_tag, ft::pair<const char, int>, long, ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::Node<ft::pair<const char, int> > *, ft::pair<const char, int> &> >' for 1st argument
    struct pair
           ^
In file included from ./base/map/equal_range/patched.cpp:3:
../map.hpp:620:23: error: no matching member function for call to 'GetNode'
      nodeptr right = GetNode<key_type, key_compare>(k);
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
./base/map/equal_range/patched.cpp:14:15: note: in instantiation of member function 'ft::map<char, int, ft::less<char>, std::allocator<ft::pair<const char, int> > >::equal_range' requested here
  ret = mymap.equal_range('b');
              ^
../map.hpp:168:31: note: candidate template ignored: substitution failure: too many template arguments for function template 'GetNode'
    template<class V> nodeptr GetNode(const V & data) {
                              ^
../map.hpp:180:31: note: candidate template ignored: substitution failure: too many template arguments for function template 'GetNode'
    template<class V> nodeptr GetNode(const V & data) const {
                              ^
2 errors generated.
